// RUN: %target-swift-frontend(mock-sdk: %clang-importer-sdk) %s -enable-import-objc-generics -emit-ir | FileCheck %s

// REQUIRES: objc_interop

sil_stage canonical

import Swift
import Foundation

sil @metatype_sink : $@convention(thin) <T> (@thick T.Type) -> ()
sil @objc_class_sink : $@convention(thin) <T: AnyObject> (@objc_metatype T.Type) -> ()

// CHECK-LABEL: define void @objc_generic_class_metatypes()
sil @objc_generic_class_metatypes : $@convention(thin) () -> () {
entry:
  %z = function_ref @metatype_sink : $@convention(thin) <T> (@thick T.Type) -> ()
  %y = function_ref @objc_class_sink : $@convention(thin) <T: AnyObject> (@objc_metatype T.Type) -> ()

  // All instances of the generic ObjC class are erased to the same metadata
  // at runtime.
  // CHECK: [[METADATA:%.*]] = call %swift.type* @_TMaCSo12GenericClass()
  %a = metatype $@thick GenericClass<NSString>.Type
  // CHECK: call void @metatype_sink(%swift.type* [[METADATA]], %swift.type* [[METADATA]])
  apply %z<GenericClass<NSString>>(%a) : $@convention(thin) <T> (@thick T.Type) -> ()

  // CHECK: call void @metatype_sink(%swift.type* [[METADATA]], %swift.type* [[METADATA]])
  %b = metatype $@thick GenericClass<NSObject>.Type
  apply %z<GenericClass<NSObject>>(%b) : $@convention(thin) <T> (@thick T.Type) -> ()

  // CHECK: [[OBJC_CLASS:%.*]] = call %objc_class* @swift_getInitializedObjCClass(%objc_class* @"OBJC_CLASS_$_GenericClass")
  // CHECK: call void @objc_class_sink(%objc_class* [[OBJC_CLASS]], %swift.type* [[METADATA]])
  %c = metatype $@objc_metatype GenericClass<NSString>.Type
  apply %y<GenericClass<NSString>>(%c) : $@convention(thin) <T: AnyObject> (@objc_metatype T.Type) -> ()

  // Check that generic classes are erased at depth.
  // CHECK: [[TUPLE_METADATA:%.*]] = call %swift.type* @_TMaGSaTCSo12GenericClassSi__()
  %d = metatype $@thick Array<(GenericClass<NSString>, Int)>.Type
  // CHECK: call void @metatype_sink(%swift.type* [[TUPLE_METADATA]], %swift.type* [[TUPLE_METADATA]])
  apply %z<Array<(GenericClass<NSString>, Int)>>(%d) : $@convention(thin) <T> (@thick T.Type) -> ()
  %e = metatype $@thick Array<(GenericClass<NSObject>, Int)>.Type
  // CHECK: call void @metatype_sink(%swift.type* [[TUPLE_METADATA]], %swift.type* [[TUPLE_METADATA]])
  apply %z<Array<(GenericClass<NSObject>, Int)>>(%e) : $@convention(thin) <T> (@thick T.Type) -> ()

  return undef : $()
}

// CHECK-LABEL: define linkonce_odr hidden %swift.type* @_TMaCSo12GenericClass()
// CHECK:         call %objc_class* @swift_getInitializedObjCClass(%objc_class* @"OBJC_CLASS_$_GenericClass")

// CHECK-LABEL: define linkonce_odr hidden %swift.type* @_TMaGSaTCSo12GenericClassSi__()
// CHECK:         [[TUPLE:%.*]] = call %swift.type* @_TMaTCSo12GenericClassSi_()
// CHECK:         call %swift.type* @_TMaSa(%swift.type* [[TUPLE]])

// CHECK-LABEL: define linkonce_odr hidden %swift.type* @_TMaTCSo12GenericClassSi_()
// CHECK:         [[CLASS:%.*]] = call %swift.type* @_TMaCSo12GenericClass()
// CHECK:         call %swift.type* @swift_getTupleTypeMetadata2(%swift.type* [[CLASS]], %swift.type* @_TMSi,
